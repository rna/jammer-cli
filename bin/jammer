#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'


begin
  require 'jammer'
rescue LoadError
  # Fallback for development environment when not installed
  require_relative '../lib/jammer'
end


def install_git_hook
  unless system('git rev-parse --is-inside-work-tree', out: File::NULL, err: File::NULL)
    puts "Error: Not inside a Git repository."
    exit 1
  end

  git_dir = `git rev-parse --git-dir`.strip
  hooks_dir = File.join(git_dir, 'hooks')
  pre_commit_hook_path = File.join(hooks_dir, 'pre-commit')

  unless Dir.exist?(hooks_dir)
    puts "Error: '.git/hooks' directory not found."
    exit 1
  end

  if File.exist?(pre_commit_hook_path) && !options[:force]
    print "Warning: '#{pre_commit_hook_path}' already exists. Overwrite? [y/N] "
    overwrite = STDIN.gets.chomp.downcase
    unless overwrite == 'y'
      puts "Aborted. Use --force to overwrite."
      exit 0
    end
  end

  puts "Installing pre-commit hook..."

  hook_content = <<~SCRIPT
  #!/bin/sh
  # Hook installed by jammer-cli

  output=$(jammer 2>&1)
  jammer_exit_code=$?


  if [ $jammer_exit_code -eq 127 ]; then
    echo "Warning: jammer command not found, skipping pre-commit check."
    exit 0
  elif [ $jammer_exit_code -ne 0 ]; then
    echo "$output"
    exit $jammer_exit_code
  else
    exit 0
  fi
  SCRIPT

  begin
    File.write(pre_commit_hook_path, hook_content)
    FileUtils.chmod('+x', pre_commit_hook_path)
    puts "Successfully installed pre-commit hook to '#{pre_commit_hook_path}'"
    exit 0
  rescue => e
    puts "Error installing hook: #{e.message}"
    exit 1
  end
end

def uninstall_git_hook
  unless system('git rev-parse --is-inside-work-tree', out: File::NULL, err: File::NULL)
    puts "Error: Not inside a Git repository."
    exit 1
  end

  git_dir = `git rev-parse --git-dir`.strip
  pre_commit_hook_path = File.join(git_dir, 'hooks', 'pre-commit')

  if File.exist?(pre_commit_hook_path)
    content = File.read(pre_commit_hook_path)
    if content.include?("# Hook installed by jammer-cli")
      begin
        File.delete(pre_commit_hook_path)
        puts "Successfully uninstalled pre-commit hook from '#{pre_commit_hook_path}'"
        exit 0
      rescue => e
        puts "Error uninstalling hook: #{e.message}"
        exit 1
      end
    else
      puts "Warning: An existing pre-commit hook was found that was not installed by jammer-cli. Skipping uninstall."
      exit 1
    end
  else
    puts "No jammer-cli pre-commit hook found to uninstall."
    exit 0
  end
end


options = { install_hook: false }
new_jammer = Jammer::CLI.new # Default keyword will be TODO

parser = OptionParser.new do |option|
  option.banner = "Usage: jammer [options]"

  option.separator ""
  option.separator "Keyword checking options:"

  option.on('-a', '--keyword KEYWORD', 'Assigns a new search keyword') { |keyword| new_jammer.keyword = keyword }
  option.on('-l', '--list', 'List all occurrences of the keyword') { | | options[:action] = :list }
  option.on('-c', '--count', 'Count all occurrences of the keyword') { | | options[:action] = :count }

  option.separator ""
  option.separator "Git Hook options:"

  option.on('--install-hook', 'Install the pre-commit hook in the current Git repository') do
    options[:install_hook] = true
  end

  option.separator ""
  option.separator "Other options:"

  option.on('-h', '--help', 'Show this message') do
    puts option
    exit
  end

  option.on('-v', '--version', 'Show version') do
    puts "Jammer version #{Jammer::VERSION}"
    exit
  end

  option.on('-f', '--force', 'Force overwrite of existing git hooks') do
    options[:force] = true
  end

  option.on('--uninstall-hook', 'Uninstall the pre-commit hook') do
    options[:uninstall_hook] = true
  end

end

begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  puts "Error: #{e.message}"
  puts parser
  exit 1
end


if options[:install_hook]
  install_git_hook
  exit 0
end

if options[:uninstall_hook]
  uninstall_git_hook
  exit 0
end


case options[:action]
when :list
  new_jammer.occurrence_list
  exit 0
when :count
  count = new_jammer.occurrence_count
  puts count
  exit 0
else
  if new_jammer.exists?
    puts "Found keywords like '#{new_jammer.keyword}'. Aborting commit."
    exit 1
  else
    exit 0
  end
end
